Code Smell 1:

Code Snippet:

  static class Functions {
    static Predicate<Object> NOT_EDITABLE = new Predicate<Object>() {
      @Override
      public boolean apply(Object input) {
        return false;
      }
    };

    static Predicate<Object> ALWAYS_EDITABLE = new Predicate<Object>() {
      @Override
      public boolean apply(Object input) {
        return true;
      }
    };
  }

Location on the code base: 
code\biz.ganttproject.core\src\main\java\biz\ganttproject\core\model\task\TaskDefaultColumn.java

Code Smell identification:
Duplicated code. This code snippet has two methods with the same exact structure, where the only
changes are in the return value and in the name of the Predicate. 

Refactoring proposal:
A possible solution for this code smell is to use an if statement to alter the value of a variable
to later return in a function using the same structure, as well as to decide what to name the Predicate. 
The variable used should have a boolean value. In conclusion, in the end we should have two static
objects instead of one.

Code Smell 2:

Code Snippet:

public class Connector {
    (...)
    private final Vector myStart;
    private final Vector myEnd;
    private final String myStyle;

    Connector(Vector start, Vector end, String style) {
      myStart = start;
      myEnd = end;
      myStyle = style;
    }
    Vector getStart() {
      return myStart;
    }

    Vector getEnd() {
      return myEnd;
    }

    String getStyleName() {
      return myStyle;
    }
}

Location on the code base: 
code\biz.ganttproject.core\src\main\java\biz\ganttproject\core\chart\scene\gantt\Connector.java

Code Smell identification:
Data Class. This code snippet reveals a class that is too small. It only contains data and no real
functionality, only getter methods.

Refactoring proposal:
In order to fix this code smell we would have to add some methods to this class that aren't 
getters nor setters. In case there aren't any methods to add, this class shouldn't exist.



Code Smell 3:

Code Snippet:

public void drawDependencies(Collection<Connector> connectors) {
    if (myChartApi.getBarHeight() != myBarHeight) {
      myFinishArrow = new Canvas.Arrow((int)(0.7f * myChartApi.getBarHeight()), (int)(0.3f*myChartApi.getBarHeight()));
      myBarHeight = myChartApi.getBarHeight();
    }
    (...)
    // 44 lines 
    (...)
        lastLine.setStyle(lineStyle);
        lastLine.setArrow(myFinishArrow);
      }
    }
  }

Location on the code base: 
code\biz.ganttproject.core\src\main\java\biz\ganttproject\core\chart\scene\gantt\DependencySceneBuilder.java

Code Smell identification:
Long Method. This method is very complex and it shouldn't be. This complexity makes it difficult to read the method
and know what it does. 

Refactoring proposal:
To make this method more readable and shorter, one could create auxiliary methods in each if statement which would 
contain the code of the same region. 